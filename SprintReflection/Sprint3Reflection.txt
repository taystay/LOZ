Before we were able to work out the logistics of Sprint 3 we had to determine how we wanted the collision handler
to work as well as how we wanted to make the rooms. For the collision handler, we decided to make an iterator to cycle
through the game objects in pairs, a detector to see if there's a collision between each two objects, and finally a 
behavior handler to determine what is suppoed to happen when two objects collide. In order for the iterator to work
we decided to have all of our objects from Link to Items to Enemies and Environment blocks extend an IGameObjects 
interface for the iterator to easily iterate through them. Next the collider detector uses the Intersect() method in
the XNA generic Rectangle. Depending on whether the long side of the interecting rectangle is its width or height, we can
determine what side the collision happened on. Finally the behavior handler checks what types the two colliding objects 
are and imposes a behavior on them accordingly. Next, for our room design we chose to use CSV files for the sake of ease
and clarity. Since none of us had previous experience with LUA or JSON files, CSV was the easiest to make using Excel.
For storing the rooms we decided to use a 3D point with the X and Y being the layout of the dungeon itself and the Z axis
being the basement. From there we determined a standard for the CSV files and wrote a parser for it to read the position
of the room, the door types of that room, the blocks of the room, the enemies, and finally the items. 